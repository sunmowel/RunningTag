/*************************************************************************************************************
*                                              INCLUDE FILES                                                 *
*************************************************************************************************************/
#include <app.h>


/*************************************************************************************************************
*                                            FUNCTION PROTOTYPES                                             *
*************************************************************************************************************/
CPU_BOOL DecodeProcess (sDecodeLFTypeDef *plf, sDecodeTestTypeDef *test, CPU_BOOL *decode, CPU_INT8U n)
{
	eDecodeStateTypeDef state;
	CPU_BOOL bit_data[DECODE_DATA_BIT_LEN];
	CPU_BOOL result;
	CPU_INT8U i;
	
    *decode = DEF_ON;
    result = DEF_FALSE;
    
    for (i = 0; i < n; i++)
    {
        test->monitor_cnt++;
        if (DecodeStateMonitor() == DECODE_STATE_CHECK)
        {
            break;
        }
        BspAnalogOff(); /* Close analog */
        BspTimerDelayL(BSP_TIMER_DELAY_L_65MS);
    }
    
    if (i == n)
    {
        *decode = DEF_OFF;
        BspAnalogOff(); /* Close analog */
        return result;
    }
	
    state = DECODE_STATE_CHECK;
    
	while (1)
    {
		switch (state)
		{
			case DECODE_STATE_CHECK:	test->check_cnt++;
                                        //BspLed1Off();   /* Test1 Low */
                                        //BspLed1On();    /* Test1 High */
										state = DecodeStateCheck(&plf->measure); /* 1.5ms */
										break;
			case DECODE_STATE_MEASURE:	test->measure_cnt++;
                                        //BspLed1Off();   /* Test1 Low */
                                        //BspLed1On();    /* Test1 High */
										state = DecodeStateMeasure(&plf->variable, &plf->measure);  /* 420us */
										break;
			case DECODE_STATE_ZERO:		test->zero_cnt++;
                                        //BspLed1Off();   /* Test1 Low */
										state = DecodeStateZero(&plf->variable, &plf->measure);
										break;
			case DECODE_STATE_SYNC:		test->sync_cnt++;
										state = DecodeStateSync(&plf->variable, &plf->measure);
										break;
			case DECODE_STATE_PREAMBLE:	test->preamble_cnt++;
                                        //BspLed1On();    /* Test1 High */
										state = DecodeStatePreamble(&plf->variable, &plf->measure);/* 9ms */
										break;
			case DECODE_STATE_MATCH:	test->match_cnt++;
                                        //BspLed1Off();   /* Test1 Low */
                                        //BspLed1On();    /* Test1 High */
										state = DecodeStateMatch(&plf->variable);   /* 7ms */
										break;
			case DECODE_STATE_DATA:	    test->data_cnt++;
                                        //BspLed1Off();   /* Test1 Low */
                                        //BspLed1On();    /* Test1 High */
										state = DecodeStateData(bit_data, plf->variable);   /* 32ms */
										break;
			case DECODE_STATE_VERIFY:	test->verify_cnt++;
                                        //BspLed1Off();   /* Test1 Low */
										state = DecodeStateVerify(bit_data, plf->data);
										break;
		    default:					state = DECODE_STATE_SLEEP;
										break;
    	}
		
		if (state == DECODE_STATE_SLEEP)
		{
			result = DEF_FALSE;
			break;
		}
		if (state == DECODE_STATE_COMPLETE)
		{
			test->complete_cnt++;
			result = DEF_TRUE;
			break;
		}
	}
	//BspLed2Off();
	BspAnalogOff(); /* Close analog */
	//BspTestLow();   /* Test Low */
    //BspLed1Off();   /* Test1 Low */
	return result;
}

eDecodeStateTypeDef DecodeStateMonitor (void)
{
	CPU_INT16U value;
    //CPU_INT16U value_v;
	
    //BspLed1Off();   /* Test1 Low */
    //BspLed1On();    /* Test1 High */
	BspAnalogOn();	/* Open analog 329us*/
    //BspLed1On();    /* Test1 High */
    //BspLed1Off();   /* Test1 Low */
	BspAnalogOpenR();	/* Open rear ADC */
    //BspTestLow();	/* Test Low */
	//BspLed1On();    /* Test1 High */
	BspAnalogGetValue(&value);	/* 25us */
    //value_v = (CPU_INT16U)(value >> 2) + (CPU_INT16U)((value * DECODE_REF_R) >> 10);
    //value_v = value_v;
	//BspLed1Off();   /* Test1 Low */
	if (value >= DECODE_G_CARR_AD)	/* Monitor carrier */
	{
		return DECODE_STATE_CHECK;
	}
    
	return DECODE_STATE_SLEEP;
}

eDecodeStateTypeDef DecodeStateCheck (sDecodeMeasTypeDef *measure)
{
	CPU_INT8U  i, j;
	CPU_INT16U value;
	
	for (i = 0; i < DECODE_CHECK_CNT; i++)	
	{
		/* 50us */
		//BspLed1Toggle();	/* Test1 Toggle */
		BspAnalogGetValue(&value);	/* Sampling */
		if (value < DECODE_G_CARR_AD)
		{
			return DECODE_STATE_SLEEP;
		}
		//BspLed1On();    /* Test1 High */
        for (j = 0; j < 30; j++);   /* 25us */
		//BspLed1Off();   /* Test1 Low */
	}
	measure->carr_r = value;
    measure->fr = DECODE_ANALOG_R;
	return DECODE_STATE_MEASURE;
}

eDecodeStateTypeDef DecodeStateMeasure (sDecodeVarTypeDef *variable, sDecodeMeasTypeDef *measure)
{
	CPU_INT8U  i;
	CPU_INT16U value;
    CPU_INT16U rate;
	CPU_INT16U carr_min;
	
    BspAnalogOpenF();	/* Open front ADC */
	BspAnalogGetValue(&value);  /* Sampling */
	measure->carr_f = value;
	measure->fr = DECODE_ANALOG_F;
	if (value < DECODE_G_FR_AD)
	{
        BspAnalogOpenR();	/* Open rear ADC */
        measure->fr = DECODE_ANALOG_R;   
        measure->carr = measure->carr_r;
	}
    else
    {
        measure->carr = measure->carr_f;
    }
    measure->noise = 0;
    carr_min = measure->carr;
	for (i = 0; i < DECODE_MEASURE_CNT; i++)
	{
		BspAnalogGetValue(&value);	/* Sampling */
		measure->carr = (measure->carr + value) / 2;
        //measure->dbg.carr[i] = value;
        //measure->dbg.carr_v[i] = (CPU_INT16U)(measure->dbg.carr[i]  >> 2) + (CPU_INT16U)((measure->dbg.carr[i]  * DECODE_REF_R) >> 10);
        if (value > measure->carr)
        {
            measure->noise = (measure->noise + value - measure->carr) / 2;
        }
        else
        {
            measure->noise = (measure->noise + measure->carr - value) / 2;
        }
        if (carr_min > value)
        {
            carr_min = value;
        }
	}
    if (measure->carr > (DECODE_AD / 2))
    {
        rate = DECODE_G_RATE_LOW;
    }
    else
    {
        rate = DECODE_G_RATE_HIGH;
    }
    measure->noise = measure->noise * 2;
    if (measure->noise > DECODE_G_NOISE_AD)
    {
        measure->noise = DECODE_G_NOISE_AD;
    }
    variable->gate = (measure->carr - measure->noise) * (rate / 10) / 10 
                   + (measure->carr - measure->noise) * (rate % 10) / 100 ;
    variable->step = (measure->carr - measure->noise - variable->gate) / 8;
    //measure->dbg.zero_n = 0;
    
    measure->carr_f_v = (CPU_INT16U)(measure->carr_f >> 2) + (CPU_INT16U)((measure->carr_f * DECODE_REF_R) >> 10);
    measure->carr_r_v = (CPU_INT16U)(measure->carr_r >> 2) + (CPU_INT16U)((measure->carr_r * DECODE_REF_R) >> 10);
    measure->carr_v = (CPU_INT16U)(measure->carr >> 2) + (CPU_INT16U)((measure->carr * DECODE_REF_R) >> 10);
    measure->noise_v = (CPU_INT16U)(measure->noise >> 2) + (CPU_INT16U)((measure->noise * DECODE_REF_R) >> 10);
    variable->gate_v = (CPU_INT16U)(variable->gate >> 2) + (CPU_INT16U)((variable->gate * DECODE_REF_R) >> 10);
    variable->step_v = (CPU_INT16U)(variable->step >> 2) + (CPU_INT16U)((variable->step * DECODE_REF_R) >> 10);
	
	return DECODE_STATE_ZERO;
}

eDecodeStateTypeDef DecodeStateZero (sDecodeVarTypeDef *variable, sDecodeMeasTypeDef *measure)
{
	CPU_INT8U  i;
	CPU_INT16U value;

    for (i = 0; i < DECODE_ZERO_CNT; i++)
	{
		/* 3.064s */
		//BspLed1Toggle();    /* Test1 Toggle */
		//BspAnalogOn();  /* Open analog */
		BspAnalogGetValue(&value);  /* Sampling */
		if (value < variable->gate)
		{
            BspAnalogGetValue(&value);  /* Sampling */
            if (value < variable->gate)
            {
                BspAnalogGetValue(&value);  /* Sampling */
                if (value < variable->gate)
                {
                    measure->zero = value;
                    return DECODE_STATE_SYNC;
                }
            }
		}
		//BspAnalogOff();	/* Close analog */
        //BspLed1On();    /* Test1 High */
		BspTimerDelayL(DECODE_WAIT_L_3MS);	/* Wait for sample 3ms*/
        //BspLed1Off();   /* Test1 Low */
	}
	
	return DECODE_STATE_SLEEP;
}

eDecodeStateTypeDef DecodeStateSync (sDecodeVarTypeDef *variable, sDecodeMeasTypeDef *measure)
{
	CPU_INT8U  i;
    CPU_INT8U  n;
	CPU_INT16U value;
	
    n = 0;
	for (i = 0; i < DECODE_SYNC_CNT; i++)
	{
        /* 36us */
        //BspLed1On();    /* Test1 High */
		BspAnalogGetValue(&value);	/* Sampling */
		if (value > (variable->gate + measure->noise))
		{
            variable->prev = value;
            //BspLed1Off();   /* Test1 Low */
            //BspLed1On();    /* Test1 High */
			return DECODE_STATE_PREAMBLE;   /* 10us */
		}
        else
        {
            if (value < (measure->zero + DECODE_G_NOISE_AD))
            {
                measure->zero = (measure->zero + value) / 2;
                measure->zero_v = (CPU_INT16U)(measure->zero >> 2) + (CPU_INT16U)((measure->zero * DECODE_REF_R) >> 10);
            }
            if (n < DECODE_MEASURE_CNT)
            {
                //measure->dbg.zero[i] = value;
                //measure->dbg.zero_v[i] = (CPU_INT16U)(measure->dbg.zero[i] >> 2) + (CPU_INT16U)((measure->dbg.zero[i] * DECODE_REF_R) >> 10);
                //measure->dbg.zero_n = n;
                n++;
            }
            //measure->dbg.zero_cnt = i;
        }
        //BspLed1Off();   /* Test1 Low */
	}
	return DECODE_STATE_SLEEP;
}

eDecodeStateTypeDef DecodeStatePreamble (sDecodeVarTypeDef *variable, sDecodeMeasTypeDef *measure)
{
	CPU_INT8U  i, j, k;
	CPU_INT16U value;
    CPU_INT8U  cnt_h;
    //CPU_INT8U  cnt_l;
	
    //BspLed1Off();   /* Test1 Low */
    //BspLed2On();    /* Test1 High */
    value = variable->prev;
	for (i = 0; i < DECODE_PREAMBLE_BIT_LEN + 2; i++)
	{
        //BspLed1On();    /* Test1 High */
		/* 1ms */
		//BspLed1Toggle();    /* Test1 Toggle */
        /* 514us */
        //BspLed1On();    /* Test1 High */
		for (j = 0; j < DECODE_PREAMBLE_CNT_H; j++)
		{
			if (value < variable->gate)
			{
                BspAnalogGetValue(&value);	/* Sampling */
                if (value < variable->gate)
                {
                    cnt_h = j;
                    break;
                }
			} 
            BspAnalogGetValue(&value);	/* Sampling */
		}
        if (j == DECODE_PREAMBLE_CNT_H)
        {
            if (i > 4)
            {
                break;
            }
        }
        //BspLed1Off();   /* Test1 Low */
        /* 485us */
        //BspLed1On();    /* Test1 High */
		for (k = 0; k < DECODE_PREAMBLE_CNT_L; k++)
		{
            BspAnalogGetValue(&value);	/* Sampling */
			if (value > variable->gate)
			{
				//cnt_l = k;
                break;
			}
		}
        if (k == DECODE_PREAMBLE_CNT_L)
        {
            //BspLed2Off();
            //BspLed2On();    /* Test1 High */
            return DECODE_STATE_SLEEP;
        }
        else if (k == 0)
        {
            if (i > 4)
            {
                break;
            }
        }
        
        //BspLed1Off();   /* Test1 Low */
        if (cnt_h > 20)
        {
            variable->gate = variable->gate + variable->step;
            //variable->gate_v = (CPU_INT16U)(variable->gate >> 2) + (CPU_INT16U)((variable->gate * DECODE_REF_R) >> 10);
        }
        if (cnt_h < 16)
        {
            variable->gate = variable->gate - variable->step;
            //variable->gate_v = (CPU_INT16U)(variable->gate >> 2) + (CPU_INT16U)((variable->gate * DECODE_REF_R) >> 10);
        } 
        
		//measure->dbg.preamble[i].cnt_h = cnt_h;
        //measure->dbg.preamble[i].cnt_l = cnt_l;
	}
    //measure->dbg.preamble_n = i;
    for (j = 0; j < DECODE_PREAMBLE_CNT_L; j++)
    {
        BspAnalogGetValue(&value);	/* Sampling */
        if (value < variable->gate)
        {
            break;
        }
    }
    if (j == DECODE_PREAMBLE_CNT_L)
    {
        //BspLed2Off();
        //BspLed2On();    /* Test1 High */
        return DECODE_STATE_SLEEP;
    }
    variable->prev = value;
    //cnt_h = measure->dbg.preamble[i - 1].cnt_h;
    if (cnt_h > 22)
    {
        variable->time = DECODE_WAIT_H_800US;
    }
    else 
    {
        variable->time = DECODE_WAIT_H_720US;
    }
    
	//BspLed2Off();   /* Test1 Low */
    //BspLed1On();    /* Test1 High */
	return DECODE_STATE_MATCH;  /* 10us */
}

eDecodeStateTypeDef DecodeStateMatch (sDecodeVarTypeDef *variable)
{
	CPU_INT8U  i, j;
	CPU_INT16U value;
	CPU_INT8U  match;
	CPU_BOOL   point[2];
    CPU_BOOL   temp;
	
    //BspLed1Off();   /* Test1 Low */
    BspLed2On();    /* Test1 High */
	match = 0x00;
    value = variable->prev;
	for (i = 0; i < DECODE_MATCH_BIT_LEN - 1; i++)
	{
		/* 500us */
		//BspLed1Toggle();    /* Test1 Toggle */
		if (value < variable->gate)
		{
			point[0] = DEF_LOW;
		}
		else
		{
			point[0] = DEF_HIGH;
		}
		//BspLed1On();    /* Test1 High */
		BspTimerDelayH(variable->time);	/* Wait for analog sample*/
		//BspLed1Off();   /* Test1 Low */
		BspAnalogGetValue(&value);	/* Sampling */
		if (value < variable->gate)
		{
			point[1] = DEF_LOW;
		}
		else
		{
			point[1] = DEF_HIGH;
		}   
        BspAnalogGetValue(&value);	/* Sampling */
		if (value < variable->gate)
		{
			temp = DEF_LOW;
		}
		else
		{
			temp = DEF_HIGH;
		}
        if (point[1] != temp)
        {
            point[1] = temp;
        }
		if (point[0] != point[1])
		{
			match |= (CPU_INT8U)(0x01 << (6 - i));
		}
		
		for (j = 0; j < DECODE_MATCH_CNT; j++)
		{
			BspAnalogGetValue(&value);	/* Sampling */
			if (point[1] == DEF_HIGH)
			{
				if (value < variable->gate)
				{
					break;
				}
			}
			else
			{
				if (value > variable->gate)
				{
					break;
				}
			}
		}
		if (j == DECODE_MATCH_CNT)
		{
			return DECODE_STATE_SLEEP;
		}
	}
	
	if (match == DECODE_MATCH_WORD)
	{
        variable->prev = value;
		return DECODE_STATE_DATA;
	}
	
	return DECODE_STATE_SLEEP;
}

eDecodeStateTypeDef DecodeStateData (CPU_BOOL *pbit, sDecodeVarTypeDef variable)
{
	CPU_INT8U  i, j;
	CPU_INT16U value;
	CPU_BOOL   point[2];
    CPU_BOOL   temp;
	
    value = variable.prev;
	for (i = 0; i < DECODE_DATA_BIT_LEN; i++)
	{
		/* 500us */
		//BspLed1Toggle();    /* Test1 Toggle */
		if (value < variable.gate)
		{
			point[0] = DEF_LOW;
		}
		else
		{
			point[0] = DEF_HIGH;
		}
		BspTimerDelayH(variable.time);	/* Wait for analog sample*/
		BspAnalogGetValue(&value);	/* Sampling */
		if (value < variable.gate)
		{
			point[1] = DEF_LOW;
		}
		else
		{
			point[1] = DEF_HIGH;
		}
        BspAnalogGetValue(&value);	/* Sampling */
		if (value < variable.gate)
		{
			temp = DEF_LOW;
		}
		else
		{
			temp = DEF_HIGH;
		}
        if (point[1] != temp)
        {
            point[1] = temp;
        }
		if (point[0] != point[1])
		{
			pbit[i] = 1;
		}
		else
		{
			pbit[i] = 0;
		}
		
		for (j = 0; j < DECODE_DATA_CNT; j++)
		{
			BspAnalogGetValue(&value);	/* Sampling */
			if (point[1] == DEF_HIGH)
			{
				if (value < variable.gate)
				{
					break;
				}
			}
			else
			{
				if (value > variable.gate)
				{
					break;
				}
			}
		}
		if (j == DECODE_DATA_CNT)
		{
			return DECODE_STATE_SLEEP;
		}
	}

	return DECODE_STATE_VERIFY;
}

eDecodeStateTypeDef DecodeStateVerify (CPU_BOOL *pbit, CPU_INT8U *pdata)
{
	CPU_INT8U  i;
    CPU_INT8U  n;
	CPU_INT8U  crc;
    CPU_INT8U  data[DECODE_LF_DATA_BYTE_LEN];
    CPU_INT16U crc_16;
    unsigned short CRCTable[16] =
{
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
    0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF
};
    
    unsigned char tmp;
    unsigned char tmp1;
    CPU_INT16U tmp2;
    
    n = 0;
 /*   CRCTable[n++] = 0x0000;
    CRCTable[n++] = 0x1021;
    CRCTable[n++] = 0x2042;
    CRCTable[n++] = 0x3063;
    CRCTable[n++] = 0x4084;
    CRCTable[n++] = 0x50A5;
    CRCTable[n++] = 0x60C6;
    CRCTable[n++] = 0x70E7;
    CRCTable[n++] = 0x8108;
    CRCTable[n++] = 0x9129;
    CRCTable[n++] = 0xA14A;
    CRCTable[n++] = 0xB16B;
    CRCTable[n++] = 0xC18C;
    CRCTable[n++] = 0xD1AD;
    CRCTable[n++] = 0xE1CE;
    CRCTable[n++] = 0xF1EF;*/
	
	for (i = 0; i < DECODE_LF_DATA_BYTE_LEN; i++)
	{
		pdata[i] = 0;
	}
	for (i = 0; i < DECODE_LF_DATA_BYTE_LEN * 8; i++)
	{
		pdata[i / DEF_BYTE] |= (CPU_INT8U)(pbit[i] << (7 - i % DEF_BYTE));
	}
    for (i = 0; i < DECODE_LF_DATA_BYTE_LEN; i++)
	{
		data[i] = pdata[i];
	}
    
    
	
	crc = 0;
	for (i = 0; i < DECODE_LF_CRC_BYTE_LEN * 8; i++)
	{
		crc |= (CPU_INT16U)(pbit[i + DECODE_LF_DATA_BYTE_LEN * 8] << (7 - i));
	}
    
    
        
    crc_16 = 0xFFFF;
        
    for (i = 0; i < DECODE_LF_DATA_BYTE_LEN; i++)
    {
        tmp = (CPU_INT8U)(crc_16 >> 12); 
        crc_16 <<= 4;
        tmp1 = data[i] / 16;
        tmp ^= tmp1;
        tmp2 = CRCTable[tmp];
        crc_16 ^= tmp2; 
                
        tmp = (CPU_INT8U)(crc_16 >> 12); 
        crc_16 <<= 4; 
        tmp1 = data[i] & 0x0F;
        tmp ^= tmp1;
        tmp2 = CRCTable[tmp];
        crc_16 ^= tmp2; 
    }
     
    
    
    //crc_16 = GetCRC16(data, DECODE_LF_DATA_BYTE_LEN);
	
	if (crc != (CPU_INT8U)crc_16 )
	{
		return DECODE_STATE_SLEEP;
	}
	
	return DECODE_STATE_COMPLETE;
}


/*************************************************************************************************************
*                                               MODULE END                                                   *
*************************************************************************************************************/
